diff --git a/mod/quiz/attemptlib.php b/mod/quiz/attemptlib.php
index 7018487..b9851bc 100644
--- a/mod/quiz/attemptlib.php
+++ b/mod/quiz/attemptlib.php
@@ -988,13 +988,14 @@ class quiz_attempt {
      * @return int|false the number of seconds remaining for this attempt.
      *      False if there is no limit.
      */
-    public function get_time_left($timenow) {
+    public function get_time_left_display($timenow) {
         if ($this->attempt->state != self::IN_PROGRESS) {
             return false;
         }
-        return $this->get_access_manager($timenow)->get_time_left($this->attempt, $timenow);
+        return $this->get_access_manager($timenow)->get_time_left_display($this->attempt, $timenow);
     }
 
+
     /**
      * @return int the time when this attempt was submitted. 0 if it has not been
      * submitted yet.
@@ -1255,30 +1256,39 @@ class quiz_attempt {
 
     /**
      * Check this attempt, to see if there are any state transitions that should
-     * happen automatically.
+     * happen automatically.  This function will update the attempt checkstatetime.
      * @param int $timestamp the timestamp that should be stored as the modifed
      * @param bool $studentisonline is the student currently interacting with Moodle?
      */
     public function handle_if_time_expired($timestamp, $studentisonline) {
         global $DB;
 
-        $timeleft = $this->get_access_manager($timestamp)->get_time_left($this->attempt, $timestamp);
+        $timeclose = $this->get_access_manager($timestamp)->get_end_time($this->attempt);
 
-        if ($timeleft === false || $timeleft > 0) {
+        if ($timeclose === false || $this->is_preview()) {
+            $this->update_timecheckstate(null);
+            return; // No time limit
+        }
+        if ($timestamp < $timeclose) {
+            $this->update_timecheckstate($timeclose);
             return; // Time has not yet expired.
         }
 
         // If the attempt is already overdue, look to see if it should be abandoned ...
         if ($this->attempt->state == self::OVERDUE) {
-            $timeoverdue = -$timeleft;
-            if ($timeoverdue > $this->quizobj->get_quiz()->graceperiod) {
+            $timeoverdue = $timestamp - $timeclose;
+            $graceperiod = $this->quizobj->get_quiz()->graceperiod;
+            if ($timeoverdue >= $graceperiod) {
                 $this->process_abandon($timestamp, $studentisonline);
+            } else {
+                // Overdue time has not yet expired
+                $this->update_timecheckstate($timeclose + $graceperiod);
             }
-
             return; // ... and we are done.
         }
 
         if ($this->attempt->state != self::IN_PROGRESS) {
+            $this->update_timecheckstate(null);
             return; // Attempt is already in a final state.
         }
 
@@ -1297,6 +1307,10 @@ class quiz_attempt {
                 $this->process_abandon($timestamp, $studentisonline);
                 return;
         }
+
+        // This is an overdue attempt with no overdue handling defined, so just abandon.
+        $this->process_abandon($timestamp, $studentisonline);
+        return;
     }
 
     /**
@@ -1359,6 +1373,7 @@ class quiz_attempt {
         $this->attempt->timefinish = $timestamp;
         $this->attempt->sumgrades = $this->quba->get_total_mark();
         $this->attempt->state = self::FINISHED;
+        $this->attempt->timecheckstate = null;
         $DB->update_record('quiz_attempts', $this->attempt);
 
         if (!$this->is_preview()) {
@@ -1375,6 +1390,18 @@ class quiz_attempt {
     }
 
     /**
+     * Update this attempt timecheckstate if necessary.
+     * @param int|null the timecheckstate
+     */
+    public function update_timecheckstate($time) {
+        global $DB;
+        if ($this->attempt->timecheckstate !== $time) {
+            $this->attempt->timecheckstate = $time;
+            $DB->set_field('quiz_attempts', 'timecheckstate', $time, array('id'=>$this->attempt->id));
+        }
+    }
+
+    /**
      * Mark this attempt as now overdue.
      * @param int $timestamp the time to deem as now.
      * @param bool $studentisonline is the student currently interacting with Moodle?
@@ -1385,6 +1412,9 @@ class quiz_attempt {
         $transaction = $DB->start_delegated_transaction();
         $this->attempt->timemodified = $timestamp;
         $this->attempt->state = self::OVERDUE;
+        // If we knew the attempt close time, we could compute when the graceperiod ends.
+        // Instead we'll just fix it up through cron.
+        $this->attempt->timecheckstate = $timestamp;
         $DB->update_record('quiz_attempts', $this->attempt);
 
         $this->fire_state_transition_event('quiz_attempt_overdue', $timestamp);
@@ -1403,6 +1433,7 @@ class quiz_attempt {
         $transaction = $DB->start_delegated_transaction();
         $this->attempt->timemodified = $timestamp;
         $this->attempt->state = self::ABANDONED;
+        $this->attempt->timecheckstate = null;
         $DB->update_record('quiz_attempts', $this->attempt);
 
         $this->fire_state_transition_event('quiz_attempt_abandoned', $timestamp);
